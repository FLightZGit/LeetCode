
    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode() {}
     * ListNode(int val) { this.val = val; }
     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode mergeKLists(ListNode[] lists) {
            return partion(lists, 0, lists.length - 1);
        }

        private ListNode partion(ListNode[] lists, int i, int j) {
            if (i == j) {
                return lists[i];
            }
            if (i < j) {
                int mid = (i + j) / 2;
                ListNode lowerHalf = partion(lists, i, mid);
                ListNode higherHalf = partion(lists, mid + 1, j);
                return mergeTwoLists(lowerHalf, higherHalf);
            }else {
                return null;
            }
        }

        public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
            ListNode dummy = new ListNode();
            ListNode p = dummy;

            while (list1 != null && list2 != null) {
                if (list1.val <= list2.val) {
                    p.next = list1;
                    p = p.next;
                    list1 = list1.next;
                } else {
                    p.next = list2;
                    p = p.next;
                    list2 = list2.next;
                }
            }
            while (list1 != null) {
                p.next = list1;
                p = p.next;
                list1 = list1.next;
            }
            while (list2 != null) {
                p.next = list2;
                p = p.next;
                list2 = list2.next;
            }

            return dummy.next;
        }
    }

//runtime:2 ms
//memory:47.5 MB
